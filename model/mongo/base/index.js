// Generated by CoffeeScript 1.7.1

/*
--------------------------------------------
     Begin index.coffee
--------------------------------------------
 */
var Comment, CommentSchema, Inte, InteSchema, Lots, LotsSchema, ObjectId, Schema, Topic, TopicSchema, UserSchema, Warehouse, WarehouseSchema, Winner, WinnerSchema, config, mongoose;

mongoose = require('mongoose');

config = require('../../../config').config;

Schema = mongoose.Schema;

ObjectId = Schema.ObjectId;

mongoose.connect(config.mdb, function(err) {
  if (err) {
    console.error('Connect to %s error: %s', config.mdb, err.message);
    return process.exit(1);
  }
});


/*
--------------------------------------------
     Begin user.coffee
--------------------------------------------
 */

UserSchema = new Schema({
  mobile: {
    type: String,
    index: true
  },
  password: {
    type: String
  },
  openid: {
    type: String,
    index: {
      unique: true
    }
  },
  nickname: {
    type: String
  },
  sex: {
    type: Number,
    "default": 0
  },
  province: {
    type: String
  },
  country: {
    type: String
  },
  headimgurl: {
    type: String
  },
  active: {
    type: Boolean,
    "default": false
  },
  update_at: {
    type: Date,
    "default": new Date()
  },
  create_at: {
    type: Date,
    "default": new Date()
  }
});

mongoose.model('User', UserSchema);

exports.User = mongoose.model('User');


/*
--------------------------------------------
     Begin inte.coffee
--------------------------------------------
 */

InteSchema = new Schema({
  userid: {
    type: ObjectId,
    ref: "User",
    index: true
  },
  inte: {
    type: Number
  },
  only: {
    type: String
  },
  action: {
    type: String,
    index: true
  },
  create_at: {
    type: Date,
    "default": new Date(),
    index: true
  }
});

Inte = mongoose.model('Inte', InteSchema);

exports.Inte = Inte;


/*
--------------------------------------------
     Begin lots.coffee
--------------------------------------------
 */

LotsSchema = new Schema({
  name: {
    type: String
  },
  description: {
    type: String
  },
  img: {
    type: String
  },
  headerimg: {
    type: String
  },
  descriptionimg: {
    type: String
  },
  info_a: {
    type: String
  },
  info_b: {
    type: String
  },
  info_c: {
    type: String
  },
  order: {
    type: Number
  },
  inte: {
    type: Number
  },
  create_at: {
    type: Date,
    "default": new Date()
  }
});

Lots = mongoose.model('Lots', LotsSchema);

exports.Lots = Lots;


/*
--------------------------------------------
     Begin warehouse.coffee
--------------------------------------------
 */

WarehouseSchema = new Schema({
  info: {
    type: ObjectId,
    index: true,
    rel: "Lots"
  },
  content: {
    type: String
  },
  used: {
    type: Boolean,
    "default": false,
    index: true
  },
  usedby: {
    type: ObjectId,
    rel: "user",
    index: true
  },
  used_at: {
    type: Date
  },
  create_at: {
    type: Date,
    "default": new Date()
  }
});

Warehouse = mongoose.model('Warehouse', WarehouseSchema);

exports.Warehouse = Warehouse;


/*
--------------------------------------------
     Begin topic.coffee
--------------------------------------------
 */

TopicSchema = new Schema({
  name: {
    type: String
  },
  description: {
    type: String
  },
  lot: {
    type: String
  },
  prelot: {
    type: String
  },
  view: {
    type: Number,
    "default": 0
  },
  start_at: {
    type: Date,
    index: true
  },
  end_at: {
    type: Date,
    index: true
  },
  create_at: {
    type: Date,
    "default": new Date()
  }
});

Topic = mongoose.model('Topic', TopicSchema);

exports.Topic = Topic;


/*
--------------------------------------------
     Begin comment.coffee
--------------------------------------------
 */

CommentSchema = new Schema({
  uid: {
    type: ObjectId,
    index: true,
    ref: "User"
  },
  topic: {
    type: ObjectId,
    index: true,
    ref: "Topic"
  },
  name: {
    type: String
  },
  content: {
    type: String
  },
  create_at: {
    type: Date,
    "default": new Date(),
    index: 1
  }
});

Comment = mongoose.model('Comment', CommentSchema);

exports.Comment = Comment;


/*
--------------------------------------------
     Begin winner.coffee
--------------------------------------------
 */

WinnerSchema = new Schema({
  info: {
    type: String,
    index: true
  },
  content: {
    type: String
  },
  img: {
    type: String
  },
  username: {
    type: String
  },
  mobile: {
    type: String
  },
  adr: {
    type: String
  },
  used: {
    type: Boolean,
    "default": false,
    index: true
  },
  usedby: {
    type: ObjectId,
    rel: "user",
    index: true
  },
  used_at: {
    type: Date
  },
  create_at: {
    type: Date,
    "default": new Date()
  }
});

Winner = mongoose.model('Winner', WinnerSchema);

exports.Winner = Winner;
